// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "generic_service.h"
#include "tricycle_server.hpp"
#include "tricycle.hpp"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

namespace tricycle {

    void GenericServiceHandler::Invoke(std::string &_return, const Request &request) {
        const Invoker *invoker = InvokerManager::GetInvoker(request.class_name, request.func_name);
        string param_s = request.param;
        Json::Value jv;
        Json::CharReaderBuilder builder;
        Json::CharReader *reader = builder.newCharReader();
        string errs;
        reader->parse(param_s.c_str(), param_s.c_str() + param_s.size(), &jv, &errs);
        _return = invoker->Invoke(jv);
    }

    void TricycleServer::Serve(int port) {
        boost::shared_ptr <GenericServiceHandler> handler(new GenericServiceHandler());
        boost::shared_ptr <TProcessor> processor(new GenericServiceProcessor(handler));
        boost::shared_ptr <TServerTransport> serverTransport(new TServerSocket(port));
        boost::shared_ptr <TTransportFactory> transportFactory(new TBufferedTransportFactory());
        boost::shared_ptr <TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

        TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

        std::printf("tricycle server start, bind port %d...\n", port);
        server.serve();
    }
}