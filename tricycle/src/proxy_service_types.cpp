/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "proxy_service_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace tricycle {


Request::~Request() throw() {
}


void Request::__set_group(const std::string& val) {
  this->group = val;
}

void Request::__set_version(const std::string& val) {
  this->version = val;
}

void Request::__set_class_name(const std::string& val) {
  this->class_name = val;
}

void Request::__set_func_name(const std::string& val) {
  this->func_name = val;
}

void Request::__set_param(const std::string& val) {
  this->param = val;
}

uint32_t Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->class_name);
          this->__isset.class_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->func_name);
          this->__isset.func_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param);
          this->__isset.param = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Request");

  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("class_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->class_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("func_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->func_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->param);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Request &a, Request &b) {
  using ::std::swap;
  swap(a.group, b.group);
  swap(a.version, b.version);
  swap(a.class_name, b.class_name);
  swap(a.func_name, b.func_name);
  swap(a.param, b.param);
  swap(a.__isset, b.__isset);
}

Request::Request(const Request& other0) {
  group = other0.group;
  version = other0.version;
  class_name = other0.class_name;
  func_name = other0.func_name;
  param = other0.param;
  __isset = other0.__isset;
}
Request& Request::operator=(const Request& other1) {
  group = other1.group;
  version = other1.version;
  class_name = other1.class_name;
  func_name = other1.func_name;
  param = other1.param;
  __isset = other1.__isset;
  return *this;
}
void Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Request(";
  out << "group=" << to_string(group);
  out << ", " << "version=" << to_string(version);
  out << ", " << "class_name=" << to_string(class_name);
  out << ", " << "func_name=" << to_string(func_name);
  out << ", " << "param=" << to_string(param);
  out << ")";
}

} // namespace
